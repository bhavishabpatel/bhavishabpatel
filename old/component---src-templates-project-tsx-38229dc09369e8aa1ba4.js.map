{"version":3,"sources":["webpack:///./src/templates/project.tsx"],"names":["PBox","styled","AnimatedBox","Content","Box","props","transparentize","bg","theme","space","breakpoints","Category","fontSizes","Description","animated","div","Button","color","readableColor","Project","data","project","images","categoryAnimation","useSpring","config","slow","from","opacity","transform","to","titleAnimation","delay","descAnimation","imagesAnimation","pathname","slug","title","title_detail","desc","node","parent","banner","cover","childImageSharp","resize","src","individual","py","px","style","category","h1","dangerouslySetInnerHTML","__html","className","skills","split","map","skill","trim","key","nodes","filter","_","index","image","alt","name","fluid","query"],"mappings":"mRAUMA,EAAOC,YAAOC,KAAV,gEAAGD,CAAH,qCAKJE,EAAUF,YAAOG,KAAV,mEAAGH,CAAH,8HACS,SAACI,GAAD,OAAWC,YAAe,GAAKD,EAAME,KAGtC,SAACF,GAAD,OAAWA,EAAMG,MAAMC,MAAM,KAEzB,SAACJ,GAAD,OAAWA,EAAMG,MAAME,YAAY,IACrC,SAACL,GAAD,OAAWA,EAAMG,MAAMC,MAAM,KAK9CE,EAAWV,YAAOC,KAAV,oEAAGD,CAAH,kEAEC,SAACI,GAAD,OAAWA,EAAMG,MAAMI,UAAU,KAI1CC,EAAcZ,YAAOa,IAASC,KAAnB,uEAAGd,CAAH,sHAQDA,YAAOe,KAAV,mEAAGf,CAAH,8BACG,SAACI,GAAD,MAA4B,UAAhBA,EAAMY,MAAoB,QAAUZ,EAAMY,OAC3D,SAACZ,GAAD,OACPa,YAA8B,UAAhBb,EAAMY,MAAoB,QAAUZ,EAAMY,SA4H7CE,UAhFqC,SAAC,GAE/C,QADJC,KAAQC,EACJ,EADIA,QAASC,EACb,EADaA,OAEXC,EAAoBC,YAAU,CAClCC,OAAQA,IAAOC,KACfC,KAAM,CAAEC,QAAS,EAAGC,UAAW,4BAC/BC,GAAI,CAAEF,QAAS,EAAGC,UAAW,0BAGzBE,EAAiBP,YAAU,CAC/BC,OAAQA,IAAOC,KACfM,MAAO,IACPL,KAAM,CAAEC,QAAS,GACjBE,GAAI,CAAEF,QAAS,KAEXK,EAAgBT,YAAU,CAC9BC,OAAQA,IAAOC,KACfM,MAAO,IACPL,KAAM,CAAEC,QAAS,GACjBE,GAAI,CAAEF,QAAS,KAEXM,EAAkBV,YAAU,CAChCC,OAAQA,IAAOC,KACfM,MAAO,IACPL,KAAM,CAAEC,QAAS,GACjBE,GAAI,CAAEF,QAAS,KAGjB,OACE,kBAAC,IAAD,CAAQX,MAAOI,EAAQJ,OACrB,kBAAC,IAAD,CACEkB,SAAUd,EAAQe,KAClBC,MAAUhB,EAAQiB,aAAb,cACLC,KAAMlB,EAAQkB,KACdC,KAAMnB,EAAQoB,OACdC,OAAQrB,EAAQsB,MAAMC,gBAAgBC,OAAOC,IAC7CC,YAAU,IAEZ,kBAAC/C,EAAD,CAAMgD,GAAI,GAAIC,GAAI,CAAC,EAAG,EAAG,EAAG,KAC1B,kBAACtC,EAAD,CAAUuC,MAAO3B,GAAoBF,EAAQ8B,UAC7C,kBAAC,IAASC,GAAV,CAAaF,MAAOnB,GAAiBV,EAAQiB,cAC7C,kBAACzB,EAAD,CAAaqC,MAAOjB,GAClB,yBAAKoB,wBAAyB,CAAEC,OAAQjC,EAAQkB,SAElD,yBAAKgB,UAAU,UACZlC,EAAQmC,OACNC,MAAM,KACNC,IAAI,SAACC,GAAD,OAAWA,EAAMC,SACrBF,IAAI,SAACC,GAAD,OACH,0BAAMJ,UAAS,SAAWI,EAASE,IAAKF,GACrCA,OAMX,kBAACxD,EAAD,CAASI,GAAIc,EAAQJ,MAAO+B,GAAI,IAC9B,kBAAChD,EAAD,CAAMkD,MAAOhB,EAAiBe,GAAI,CAAC,EAAG,EAAG,EAAG,KACzC3B,EAAOwC,MACLC,OAAO,SAACC,EAAGC,GAAJ,OAAcA,EAAQ,IAC7BP,IAAI,SAACQ,GAAD,OACH,kBAAC,IAAD,CACEC,IAAKD,EAAME,KACXP,IAAKK,EAAMtB,gBAAgByB,MAAMvB,IACjCuB,MAAOH,EAAMtB,gBAAgByB,cAkBtC,IAAMC,EAAQ","file":"component---src-templates-project-tsx-38229dc09369e8aa1ba4.js","sourcesContent":["import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\nimport { transparentize, readableColor } from 'polished';\r\nimport styled from 'styled-components';\r\nimport { config, useSpring, animated } from 'react-spring';\r\nimport Layout from '../components/layout';\r\nimport { Box, AnimatedBox, Button } from '../elements';\r\nimport SEO from '../components/SEO';\r\n\r\nconst PBox = styled(AnimatedBox)`\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Content = styled(Box)<{ bg: string }>`\r\n  background-color: ${(props) => transparentize(0.9, props.bg)};\r\n\r\n  .gatsby-image-wrapper:not(:last-child) {\r\n    margin-bottom: ${(props) => props.theme.space[10]};\r\n\r\n    @media (max-width: ${(props) => props.theme.breakpoints[3]}) {\r\n      margin-bottom: ${(props) => props.theme.space[8]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Category = styled(AnimatedBox)`\r\n  letter-spacing: 0.05em;\r\n  font-size: ${(props) => props.theme.fontSizes[1]};\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst Description = styled(animated.div)`\r\n  max-width: 960px;\r\n  letter-spacing: -0.003em;\r\n  --baseline-multiplier: 0.179;\r\n  --x-height-multiplier: 0.35;\r\n  line-height: 1.58;\r\n`;\r\n\r\nconst PButton = styled(Button)<{ color: string }>`\r\n  background: ${(props) => (props.color === 'white' ? 'black' : props.color)};\r\n  color: ${(props) =>\r\n    readableColor(props.color === 'white' ? 'black' : props.color)};\r\n`;\r\n\r\ntype PageProps = {\r\n  data: {\r\n    project: {\r\n      title_detail: string;\r\n      color: string;\r\n      category: string;\r\n      desc: string;\r\n      slug: string;\r\n      skills: string;\r\n      parent: {\r\n        modifiedTime: string;\r\n        birthTime: string;\r\n      };\r\n      cover: {\r\n        childImageSharp: {\r\n          resize: {\r\n            src: string;\r\n          };\r\n        };\r\n      };\r\n    };\r\n    images: {\r\n      nodes: {\r\n        name: string;\r\n        childImageSharp: {\r\n          fluid: {\r\n            aspectRatio: number;\r\n            src: string;\r\n            srcSet: string;\r\n            sizes: string;\r\n            base64: string;\r\n            tracedSVG: string;\r\n            srcWebp: string;\r\n            srcSetWebp: string;\r\n          };\r\n        };\r\n      }[];\r\n    };\r\n  };\r\n};\r\n\r\nconst Project: React.FunctionComponent<PageProps> = ({\r\n  data: { project, images },\r\n}) => {\r\n  const categoryAnimation = useSpring({\r\n    config: config.slow,\r\n    from: { opacity: 0, transform: 'translate3d(0, -30px, 0)' },\r\n    to: { opacity: 1, transform: 'translate3d(0, 0, 0)' },\r\n  });\r\n\r\n  const titleAnimation = useSpring({\r\n    config: config.slow,\r\n    delay: 300,\r\n    from: { opacity: 0 },\r\n    to: { opacity: 1 },\r\n  });\r\n  const descAnimation = useSpring({\r\n    config: config.slow,\r\n    delay: 600,\r\n    from: { opacity: 0 },\r\n    to: { opacity: 1 },\r\n  });\r\n  const imagesAnimation = useSpring({\r\n    config: config.slow,\r\n    delay: 800,\r\n    from: { opacity: 0 },\r\n    to: { opacity: 1 },\r\n  });\r\n\r\n  return (\r\n    <Layout color={project.color}>\r\n      <SEO\r\n        pathname={project.slug}\r\n        title={`${project.title_detail} | Bhavisha`}\r\n        desc={project.desc}\r\n        node={project.parent}\r\n        banner={project.cover.childImageSharp.resize.src}\r\n        individual\r\n      />\r\n      <PBox py={10} px={[6, 6, 8, 10]}>\r\n        <Category style={categoryAnimation}>{project.category}</Category>\r\n        <animated.h1 style={titleAnimation}>{project.title_detail}</animated.h1>\r\n        <Description style={descAnimation}>\r\n          <div dangerouslySetInnerHTML={{ __html: project.desc }} />\r\n        </Description>\r\n        <div className=\"skills\">\r\n          {project.skills\r\n            .split(',')\r\n            .map((skill) => skill.trim())\r\n            .map((skill) => (\r\n              <span className={`skill ${skill}`} key={skill}>\r\n                {skill}\r\n              </span>\r\n            ))}\r\n        </div>\r\n      </PBox>\r\n\r\n      <Content bg={project.color} py={10}>\r\n        <PBox style={imagesAnimation} px={[6, 6, 8, 10]}>\r\n          {images.nodes\r\n            .filter((_, index) => index > 0)\r\n            .map((image) => (\r\n              <Img\r\n                alt={image.name}\r\n                key={image.childImageSharp.fluid.src}\r\n                fluid={image.childImageSharp.fluid}\r\n              />\r\n            ))}\r\n        </PBox>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n/* Removed Contact Us button from Layout\r\n <!--PBox style={{ textAlign: 'center' }} py={10} px={[6, 6, 8, 10]}>\r\n        <h2>Want to start your own project?</h2>\r\n        <PButton color={project.color} py={4} px={8}>\r\n          <a href=\"mailto:bhavishampatel@gmail.com\">Contact Us</a>\r\n        </PButton>\r\n      </PBox-->\r\n      */\r\nexport default Project;\r\n\r\nexport const query = graphql`\r\n  query ProjectTemplate($slug: String!, $images: String!) {\r\n    project: projectsYaml(slug: { eq: $slug }) {\r\n      title_detail\r\n      color\r\n      category\r\n      desc\r\n      slug\r\n      skills\r\n      parent {\r\n        ... on File {\r\n          modifiedTime\r\n          birthTime\r\n        }\r\n      }\r\n      cover {\r\n        childImageSharp {\r\n          resize(width: 1200, height: 675, quality: 80) {\r\n            src\r\n          }\r\n        }\r\n      }\r\n    }\r\n    images: allFile(\r\n      filter: { relativePath: { regex: $images } }\r\n      sort: { fields: name, order: ASC }\r\n    ) {\r\n      nodes {\r\n        name\r\n        childImageSharp {\r\n          fluid(quality: 95, maxWidth: 1200) {\r\n            ...GatsbyImageSharpFluid_withWebp\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}